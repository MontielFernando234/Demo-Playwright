name: Playwright Tests - Changes to main branch or PR
on: 
  push:
    branches: [main]         # Deploy solo cuando se hace merge a main
  pull_request:
    branches: [main]         # Tests en PRs hacia main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      run-all: ${{ steps.decision.outputs.run-all }}
      test-files: ${{ steps.decision.outputs.test-files }}
      should-deploy: ${{ steps.decision.outputs.should-deploy }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changed files and decide strategy
      id: decision
      run: |
        echo "🔍 Analyzing changes..."
        
        # Si es push a main, siempre ejecutar todo y deployar
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "🚀 Push to main - Running ALL tests and deploying"
          echo "run-all=true" >> $GITHUB_OUTPUT
          echo "test-files=" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Si es PR, ejecutar todo pero NO deployar
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "🔄 PR to main - Running ALL tests (no deploy)"
          echo "run-all=true" >> $GITHUB_OUTPUT
          echo "test-files=" >> $GITHUB_OUTPUT
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Para otros casos (workflow_dispatch, etc.)
        echo "run-all=true" >> $GITHUB_OUTPUT
        echo "test-files=" >> $GITHUB_OUTPUT
        echo "should-deploy=false" >> $GITHUB_OUTPUT

  test:
    needs: detect-changes
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'
        cache-dependency-path: './test_store_pw/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd test_store_pw
        npm ci
    
    - name: Install Playwright Browsers
      run: |
        cd test_store_pw
        npx playwright install --with-deps
    
    - name: Run All Tests
      if: needs.detect-changes.outputs.run-all == 'true'
      run: |
        cd test_store_pw
        echo "🚀 Running FULL test suite"
        npx playwright test --project=chromium --reporter=allure-playwright
      continue-on-error: true
    
    - name: Run Specific Tests
      if: needs.detect-changes.outputs.run-all == 'false'
      run: |
        cd test_store_pw
        echo "🎯 Running specific tests: ${{ needs.detect-changes.outputs.test-files }}"
        npx playwright test ${{ needs.detect-changes.outputs.test-files }} --project=chromium --reporter=allure-playwright
      continue-on-error: true
    
    - name: Generate Allure report
      run: |
        npm install -g allure-commandline
        cd test_store_pw
        allure generate ./allure-results -o ./allure-report --single-file
      if: always()
    
    - name: Upload report artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-report-${{ github.run_id }}
        path: test_store_pw/allure-report/
        retention-days: 7
    
    # Solo preparar para Pages si debe deployar
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      if: always() && needs.detect-changes.outputs.should-deploy == 'true'
      with:
        path: test_store_pw/allure-report/

  deploy:
    needs: [detect-changes, test]
    runs-on: ubuntu-latest
    if: always() && needs.detect-changes.outputs.should-deploy == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify-pr:
    needs: test
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    steps:
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const runId = '${{ github.run_id }}';
          const testResult = '${{ needs.test.result }}';
          const emoji = testResult === 'success' ? '✅' : '❌';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## 🎭 Playwright Test Results - PR Validation\n\n' + emoji + ' **Tests Status**: ' + testResult + '\n\n📋 **[Ver Artifacts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + runId + ')**\n\n*Los reportes se publicarán en GitHub Pages cuando se haga merge a main*'
          });

  notify-deploy:
    needs: [deploy, test]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Notify deployment
      run: |
        echo "🚀 Deployment completed!"
        echo "📊 Report URL: ${{ needs.deploy.outputs.page_url }}"
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ All tests passed!"
        else
          echo "❌ Some tests failed. Check the report."
        fi
